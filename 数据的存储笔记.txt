整型

原码
直接将二进制按照正负数的形式翻译成二进制即可

反码
将原码的符号位不变，其他位依次按位取反即可

补码
反码+1即得补码

正数的原、反、补码都相同
对于整型来说：数据存放内存中其实存放的是补码

int main()
{
   int a = 20;//4个字节-32bit
   //000000000000000000000000000010100 - 原码
   //000000000000000000000000000010100 - 反码
   //000000000000000000000000000010100 - 补码
   //0x00 00 00 14(十六进制)

   大端（存储）模式：数据的低位保存在内存的高地址，而数据的高位，保存在内存的低地址中；
   小端（存储）模式：数据的低位保存在内存的低地址，而数据的高位，保存在内存的高地址中；

   int b = -10;
   //000000000000000000000000000001010 - 原码
   //111111111111111111111111111110101 - 反码
   //1111 1111 1111 1111 1111 1111 1111 0110 - 补码
   //0xFFFFFFF6

   return 0;
}

int main()
{
   1,-1;
   //1+(-1)
   //000000000000000000000000000000001
   //111111111111111111111111111111111
   //000000000000000000000000000000000

   //100000000000000000000000000000001
   //111111111111111111111111111111110
   //111111111111111111111111111111111

   //000000000000000000000000000000001
   //100000000000000000000000000000001
   //100000000000000000000000000000010
}


int check_sys()
{
    int a= 1;
    return *(char*)&a;
    //返回1，小端
    //返回0，大端
}_
//指针类型的意义
//1.指针类型决定了指针解引用操作符能访问几个字节：char*p;*p访问1个字节，int*p;*p访问4个字节
//2.指针类型决定了指针+1，-1，加的或者减的是几个字节：char*p;p+1,跳过一个字符，int*p；p+1，跳过一个整型-4个字节

int main()
{
    //写一段代码告诉我们当前机器的字序是什么
    //返回1，小端
    //返回0，大端
    int ret = check_sys();
    if(ret == 1)
    {
        printf("小端\n");
    }
    else
    {
        printf("大端\n");
    }
    return 0;
}

             int a = 20;                       int a=1;
             0x00 00 00 14                     0x00 00 00 01

            小端：14 00 00 00                  01 00 00 00
   低地址―――――――――――――――――――――------->高地址
            大端：00 00 00 14                  00 00 00 01


int main()
{
    char a=-1;
    //11111111

    signed char b=-1;
    //11111111
    unsigned char c=-1;
    //11111111
    //00000000000000000000000011111111
    //255
    printf("a=%d,b=%d,c=%d",a,b,c);
    //-1 -1 255
    return 0;
}

int main()
{
    char a=-128;
    //10000000000000000000000010000000
    //11111111111111111111111101111111
    //11111111111111111111111110000000 补码
    //10000000
    //11111111111111111111111110000000
    //
    printf("%u\n",a);
    //%d - 打印十进制的有符号数字
    //%u - 打印十进制的无符号数字
    return 0;
}

int main()
{
    int i=20;
    unsigned int j=10;
    printf("%d\n",i+j);
    //按照补码的形式进行运算，最后格式化成为有符号整数
    return 0;
}

//10000000 00000000 00000000 00010100
//11111111 11111111 11111111 11101011
//11111111 11111111 11111111 11101100 - 补码
//
//00000000 00000000 00000000 00001010 - 补码
//
//11111111 11111111 11111111 11110110 - 结果
//11111111 11111111 11111111 11110101
//00000000 00000000 00000000 00001010 - -10


int main()
{
    unsigned int i;
    for(i=9;i>=0;i--)
    {
         printf("%u\n",i);//死循环
    }
    return 0;
}


int main()
{
    char a[1000];
    int i;
    for(i=0;i<1000;i++)
    {
        s[i]=-1-i;
    }
    printf("%d",strlen(a));//255   -1-i->-128-1=127  127-1->3 2 1 0 ->128+127=255
    return 0;
}


unsigned char i=0;               //0~255
int main()
{
     for(i=0;i<=255;i++)         //条件恒成立
     {
         printf("hello world\n");//死循环
     }
     return 0;
}


浮点型

//IEEE754规定:对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M
//9.0
//1001.0
//(-1)^0*1.001*2^3
//(-1)^s*  M  *2^E
//s - 0
//M - 1.001
//E - 3
//
//0.5
//0.1
//(-1)^0*1.0*2^-1
//E - -1
//E + 127=126
//
int main()
{
   int n=9;
   //0 00000000 00000000000000000001001- 补码
   //
   float *pfloat=(float*)&n;
   printf("n的值为:%d\n",n);            //9
   printf("*pfloat的值为:%f\n",*float); //0.00000
   //(-1)^0 * 0.00000000000000000001001 * 2^-126

   *pfloat = 9.0;
   //1001.0
   //1.001 * 2^3
   //(-1)^0 * 1.001 * 2^3
   //01000001000100000000000000000000
   
   printf("num的值为:%d\n",n);          //1091567616
   printf("*pfloat的值为:%f\n",*float); //9.000000           整型数和浮点型数放入和拿取的方式不一样
    return 0;
}


int main()
{
    float f=5.5;
    //5.5
    //101.1
    //(-1)^0 * 1.011 * 2^2
    //S=0
    //M=1.011
    //E=2
    //0 10000001 01100000000000000000000
    //0x40b00000
    //(-1)^0 * 1.011 * 2^2
    //

    //0 00000000 01100000000000000000000
    //+/-0.011 * 2^-126
    //
    //0 11111111 01100000000000000000000
    //E+127=255
    //E=128
    //1.xxx * 2^128
    //表示正负无穷大的数字
    //
    return 0;
}




